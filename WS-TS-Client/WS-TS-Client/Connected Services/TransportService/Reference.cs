//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WS_TS_Client.TransportService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TransportService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartCrossCommunication", ReplyAction="http://tempuri.org/IService1/StartCrossCommunicationResponse")]
        bool StartCrossCommunication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/StartCrossCommunication", ReplyAction="http://tempuri.org/IService1/StartCrossCommunicationResponse")]
        System.Threading.Tasks.Task<bool> StartCrossCommunicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendTelegram", ReplyAction="http://tempuri.org/IService1/SendTelegramResponse")]
        string SendTelegram();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendTelegram", ReplyAction="http://tempuri.org/IService1/SendTelegramResponse")]
        System.Threading.Tasks.Task<string> SendTelegramAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ObeyOrder", ReplyAction="http://tempuri.org/IService1/ObeyOrderResponse")]
        string ObeyOrder();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ObeyOrder", ReplyAction="http://tempuri.org/IService1/ObeyOrderResponse")]
        System.Threading.Tasks.Task<string> ObeyOrderAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UseExtensions", ReplyAction="http://tempuri.org/IService1/UseExtensionsResponse")]
        string UseExtensions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UseExtensions", ReplyAction="http://tempuri.org/IService1/UseExtensionsResponse")]
        System.Threading.Tasks.Task<string> UseExtensionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WS_TS_Client.TransportService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WS_TS_Client.TransportService.IService1>, WS_TS_Client.TransportService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool StartCrossCommunication() {
            return base.Channel.StartCrossCommunication();
        }
        
        public System.Threading.Tasks.Task<bool> StartCrossCommunicationAsync() {
            return base.Channel.StartCrossCommunicationAsync();
        }
        
        public string SendTelegram() {
            return base.Channel.SendTelegram();
        }
        
        public System.Threading.Tasks.Task<string> SendTelegramAsync() {
            return base.Channel.SendTelegramAsync();
        }
        
        public string ObeyOrder() {
            return base.Channel.ObeyOrder();
        }
        
        public System.Threading.Tasks.Task<string> ObeyOrderAsync() {
            return base.Channel.ObeyOrderAsync();
        }
        
        public string UseExtensions() {
            return base.Channel.UseExtensions();
        }
        
        public System.Threading.Tasks.Task<string> UseExtensionsAsync() {
            return base.Channel.UseExtensionsAsync();
        }
    }
}
